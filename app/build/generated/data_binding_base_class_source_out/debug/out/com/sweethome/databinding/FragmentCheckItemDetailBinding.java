// Generated by view binder compiler. Do not edit!
package com.sweethome.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.sweethome.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentCheckItemDetailBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final TextView dateText;

  @NonNull
  public final FloatingActionButton deleteButton;

  @NonNull
  public final ProgressBar deleteProgressBar;

  @NonNull
  public final TextView descriptionText;

  @NonNull
  public final ImageView photoImage;

  @NonNull
  public final TextView titleText;

  @NonNull
  public final Toolbar toolbar;

  private FragmentCheckItemDetailBinding(@NonNull CoordinatorLayout rootView,
      @NonNull TextView dateText, @NonNull FloatingActionButton deleteButton,
      @NonNull ProgressBar deleteProgressBar, @NonNull TextView descriptionText,
      @NonNull ImageView photoImage, @NonNull TextView titleText, @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.dateText = dateText;
    this.deleteButton = deleteButton;
    this.deleteProgressBar = deleteProgressBar;
    this.descriptionText = descriptionText;
    this.photoImage = photoImage;
    this.titleText = titleText;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentCheckItemDetailBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentCheckItemDetailBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_check_item_detail, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentCheckItemDetailBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.dateText;
      TextView dateText = ViewBindings.findChildViewById(rootView, id);
      if (dateText == null) {
        break missingId;
      }

      id = R.id.deleteButton;
      FloatingActionButton deleteButton = ViewBindings.findChildViewById(rootView, id);
      if (deleteButton == null) {
        break missingId;
      }

      id = R.id.deleteProgressBar;
      ProgressBar deleteProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (deleteProgressBar == null) {
        break missingId;
      }

      id = R.id.descriptionText;
      TextView descriptionText = ViewBindings.findChildViewById(rootView, id);
      if (descriptionText == null) {
        break missingId;
      }

      id = R.id.photoImage;
      ImageView photoImage = ViewBindings.findChildViewById(rootView, id);
      if (photoImage == null) {
        break missingId;
      }

      id = R.id.titleText;
      TextView titleText = ViewBindings.findChildViewById(rootView, id);
      if (titleText == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new FragmentCheckItemDetailBinding((CoordinatorLayout) rootView, dateText,
          deleteButton, deleteProgressBar, descriptionText, photoImage, titleText, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
