// Generated by view binder compiler. Do not edit!
package com.sweethome.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.imageview.ShapeableImageView;
import com.sweethome.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentProfileBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final MaterialButton addressButton;

  @NonNull
  public final MaterialButton editProfileButton;

  @NonNull
  public final MaterialButton logoutButton;

  @NonNull
  public final MaterialButton ordersButton;

  @NonNull
  public final ShapeableImageView userAvatar;

  @NonNull
  public final TextView userEmail;

  @NonNull
  public final TextView userName;

  private FragmentProfileBinding(@NonNull NestedScrollView rootView,
      @NonNull MaterialButton addressButton, @NonNull MaterialButton editProfileButton,
      @NonNull MaterialButton logoutButton, @NonNull MaterialButton ordersButton,
      @NonNull ShapeableImageView userAvatar, @NonNull TextView userEmail,
      @NonNull TextView userName) {
    this.rootView = rootView;
    this.addressButton = addressButton;
    this.editProfileButton = editProfileButton;
    this.logoutButton = logoutButton;
    this.ordersButton = ordersButton;
    this.userAvatar = userAvatar;
    this.userEmail = userEmail;
    this.userName = userName;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentProfileBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentProfileBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_profile, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentProfileBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addressButton;
      MaterialButton addressButton = ViewBindings.findChildViewById(rootView, id);
      if (addressButton == null) {
        break missingId;
      }

      id = R.id.editProfileButton;
      MaterialButton editProfileButton = ViewBindings.findChildViewById(rootView, id);
      if (editProfileButton == null) {
        break missingId;
      }

      id = R.id.logoutButton;
      MaterialButton logoutButton = ViewBindings.findChildViewById(rootView, id);
      if (logoutButton == null) {
        break missingId;
      }

      id = R.id.ordersButton;
      MaterialButton ordersButton = ViewBindings.findChildViewById(rootView, id);
      if (ordersButton == null) {
        break missingId;
      }

      id = R.id.userAvatar;
      ShapeableImageView userAvatar = ViewBindings.findChildViewById(rootView, id);
      if (userAvatar == null) {
        break missingId;
      }

      id = R.id.userEmail;
      TextView userEmail = ViewBindings.findChildViewById(rootView, id);
      if (userEmail == null) {
        break missingId;
      }

      id = R.id.userName;
      TextView userName = ViewBindings.findChildViewById(rootView, id);
      if (userName == null) {
        break missingId;
      }

      return new FragmentProfileBinding((NestedScrollView) rootView, addressButton,
          editProfileButton, logoutButton, ordersButton, userAvatar, userEmail, userName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
